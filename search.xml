<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/10/22/docker%20/"/>
      <url>/2022/10/22/docker%20/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="第一章-初识-Docker"><a href="#第一章-初识-Docker" class="headerlink" title="第一章 初识 Docker"></a>第一章 初识 Docker</h2><h3 id="1-1-Docker概念"><a href="#1-1-Docker概念" class="headerlink" title="1.1 Docker概念"></a>1.1 Docker概念</h3><ul><li>Docker是一个开源的应用容器引擎</li><li>诞生于2013年初，基于Go语言实现，dotCloud公司出品（后改名Docker Inc）</li><li>Docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上</li><li>容器是完全使用沙箱机制，相互隔离</li><li>容器性能开销极低</li></ul><p>​</p><p>​Docker可以运行在在MAC、Windows、CentOS、UBUNTU等操作系统上</p><p>​官网：<code>https://www.docker.com</code></p><h3 id="1-2-安装Docker"><a href="#1-2-安装Docker" class="headerlink" title="1.2 安装Docker"></a>1.2 安装Docker</h3><p>​1. yum包更新到最新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><p>​2. 安装需要的软件包，yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>​3. 设置yum源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>​4. 安装docker，出现输入的界面都按 y</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure><p>​5. 查看docker版本，验证是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><h3 id="1-3-Docker架构"><a href="#1-3-Docker架构" class="headerlink" title="1.3 Docker架构"></a>1.3 Docker架构</h3><ul><li>镜像（Image）：Docker镜像（Image），就相当于是一个root文件系统。比如官方镜像 ubuntu:16.04就包含了完整的一套Ubuntu16.04最小系统的root文件系统</li><li>容器（Container）：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等</li><li>仓库（Repository）：仓库可以看成一个代码控制中心，用来保存镜像</li></ul><p><img src="C:\Users\15640\AppData\Roaming\Typora\typora-user-images\image-20220614125001525.png" alt="image-20220614125001525"></p><h3 id="1-4-配置Docker镜像加速器"><a href="#1-4-配置Docker镜像加速器" class="headerlink" title="1.4 配置Docker镜像加速器"></a>1.4 配置Docker镜像加速器</h3><p>​默认情况下，将从docker hub（<a href="https://hub.docker.com/%EF%BC%89%E4%B8%8A%E4%B8%8B%E8%BD%BDdocker%E9%95%9C%E5%83%8F%EF%BC%8C%E5%A4%AA%E6%85%A2%E3%80%82%E4%B8%80%E8%88%AC%E9%83%BD%E4%BC%9A%E9%85%8D%E7%BD%AE%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8">https://hub.docker.com/）上下载docker镜像，太慢。一般都会配置镜像加速器</a></p><ul><li>USTC：中科大镜像加速器（<a href="https://docker.mirrors.ustc.edu.cn)/">https://docker.mirrors.ustc.edu.cn）</a></li><li>阿里云</li><li>网易云</li><li>腾讯云</li></ul><p>​</p><p>​在这里我们用阿里云镜像加速器，登陆阿里云查看个人加速地址</p><p>​注意：用阿里云时，每个人家加速器地址不同，然后在终端输入下面指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://eob5atc6.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##上面操作完成后输入下面代码测试是否成功</span></span></span><br><span class="line"> cat /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><h2 id="第二章-Docker-命令"><a href="#第二章-Docker-命令" class="headerlink" title="第二章 Docker 命令"></a>第二章 Docker 命令</h2><h3 id="2-1-Docker-服务相关命令"><a href="#2-1-Docker-服务相关命令" class="headerlink" title="2.1 Docker 服务相关命令"></a>2.1 Docker 服务相关命令</h3><ul><li><p>启动docker 服务：</p><ul><li>&#96;&#96;&#96;shell<br>systemctl start docker<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 停止docker 服务：</span><br><span class="line"></span><br><span class="line">  - ```shell</span><br><span class="line">    systemctl stop docker</span><br></pre></td></tr></table></figure></li></ul></li><li><p>重启docker 服务：</p><ul><li>&#96;&#96;&#96;shell<br>systemctl restart docker<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 查看docker 服务状态：</span><br><span class="line"></span><br><span class="line">  - ```shell</span><br><span class="line">    systemctl status docker</span><br></pre></td></tr></table></figure></li></ul></li><li><p>设置开机启动docker：</p><ul><li>&#96;&#96;&#96;shell<br>systemctl enable docker<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 2.2 Docker 镜像相关命令</span><br><span class="line"></span><br><span class="line">- 查看镜像：查看本地所有的镜像</span><br><span class="line"></span><br><span class="line">  - ```shell</span><br><span class="line">    docker images</span><br><span class="line">    docker images -q #查看所有镜像的id</span><br></pre></td></tr></table></figure></li></ul></li><li><p>搜索镜像：从网络中查找需要的镜像</p><ul><li>&#96;&#96;&#96;shel<br>docker search 镜像名称<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 拉取镜像：从Docker 仓库下载镜像到本地，镜像名称格式为`名称:版本号`，如果版本号不指定则是最新的版本。如果不知道镜像版本，可以去docker hub 搜索对应镜像查看</span><br><span class="line"></span><br><span class="line">  - ```shell</span><br><span class="line">    docker pull 镜像名称</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除镜像：删除本地镜像</p><ul><li>&#96;&#96;&#96;shell<br>docker rmi 镜像id&#x2F;名称号:版本号 #删除指定本地镜像<br>docker rmi ‘docker images -q’ #删除所有本地镜像<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 2.3 Docker 容器相关命令</span><br><span class="line"></span><br><span class="line">- 查看容器</span><br><span class="line"></span><br><span class="line">  - ```shell</span><br><span class="line">    docker ps #查看正在运行的容器</span><br><span class="line">    docker ps -a #查看所有容器</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建并启动容器</p><ul><li>&#96;&#96;&#96;shell<br>docker run 参数 版本:版本号 &lt;&#x2F;bin&#x2F;bash&gt;#默认为&#x2F;bin&#x2F;bash<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 参数说明：</span><br><span class="line"></span><br><span class="line">    - `-i`：保持容器运行。通常与`-t`同时使用。加入`it`这两个参数后，容器创建后自动进入容器中，退出容器后，容器自动关闭</span><br><span class="line">    - `-t`：为容器重新分配一个伪输入终端，通常与`-i`同时使用</span><br><span class="line">    - `-d`：以守护（后台）模式运行容器。创建一个容器在后台运行，需要使用`docker exec`进入容器`docker exec -it c2 /bin/bash`。退出后，容器不会关闭</span><br><span class="line">    - `-it`创建的容器一般称为交互式容器；`-id`创建的容器一般称为守护式容器</span><br><span class="line">    - `--name`：为创建的容器命名</span><br><span class="line"></span><br><span class="line">- 进入容器</span><br><span class="line"></span><br><span class="line">  - ```shell</span><br><span class="line">    docker exec 参数 #退出容器，容器不会关闭</span><br></pre></td></tr></table></figure></li></ul></li><li><p>停止容器</p><ul><li>&#96;&#96;&#96;shell<br>docker stop 容器名称<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 启动容器</span><br><span class="line"></span><br><span class="line">  - ```shell</span><br><span class="line">    docker start 容器名称</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除容器：如果容器是运行状态则删除失败，需要停止容器参能删除</p><ul><li>&#96;&#96;&#96;shel<br>docker rm 容器名称<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 查看容器信息</span><br><span class="line"></span><br><span class="line">  - ```shell</span><br><span class="line">    docker inspect 容器名称</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="第三章-Docker-容器的数据卷"><a href="#第三章-Docker-容器的数据卷" class="headerlink" title="第三章 Docker 容器的数据卷"></a>第三章 Docker 容器的数据卷</h2><h3 id="3-1-数据卷概念及作用"><a href="#3-1-数据卷概念及作用" class="headerlink" title="3.1 数据卷概念及作用"></a>3.1 数据卷概念及作用</h3><p>​思考：</p><ul><li>Docker 容器删除后，在容器中产生的数据还在吗？</li><li>Docker 容器和外部继器可以交换文件吗？</li><li>容器之间想要进行数据交互？</li></ul><p><strong>数据卷</strong></p><ul><li>数据卷是宿主机中的一个目录或文件</li><li>当容器目录和数据卷目录绑定后，对方的修改会立即同步</li><li>一个数据卷可以被多个容器同时挂载</li><li>一个容器也可以被挂载多个数据卷</li></ul><p><strong>数据卷的作用</strong></p><ul><li>容器数据持久化</li><li>外部计价器和容器间接通信</li><li>容器之间数据交换</li></ul><h3 id="3-2-配置数据卷"><a href="#3-2-配置数据卷" class="headerlink" title="3.2 配置数据卷"></a>3.2 配置数据卷</h3><ul><li><p>创建启动容器时，使用<code>-v</code>参数 设置数据卷</p><ul><li>&#96;&#96;&#96;shel<br>docker run … -v 宿主机目录(文件):容器内目录(文件) …<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 注意事项：</span><br><span class="line"></span><br><span class="line">  1. 目录必须是绝对路径</span><br><span class="line">  2. 如果目录不存在，会自动创建</span><br><span class="line">  3. 可以挂载多个数据卷</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 3.3 配置数据卷容器</span><br><span class="line"></span><br><span class="line">​多容器进行数据交换：</span><br><span class="line"></span><br><span class="line">1. 多个容器挂载同一个数据卷</span><br><span class="line">2. 数据卷容器</span><br><span class="line"></span><br><span class="line">​**配置数据卷容器：**</span><br><span class="line"></span><br><span class="line"> 1. 创建启动c3数据卷容器，使用`-v`参数 设置数据卷</span><br><span class="line"></span><br><span class="line">    ```shell</span><br><span class="line">    docker run -it --name=c3 -v /volume centos:7 /bin/bash</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="2"><li><p>创建启动c1 c2容器，使用<code>--volumes-from</code>参数 设置数据卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=c1 --volumes-from c3 centos:7 /bin/bash</span><br><span class="line">docker run -it --name=c2 --volumes-from c3 centos:7 /bin/bash</span><br></pre></td></tr></table></figure></li></ol><h2 id="第四章-Docker-应用部署"><a href="#第四章-Docker-应用部署" class="headerlink" title="第四章 Docker 应用部署"></a>第四章 Docker 应用部署</h2><h3 id="4-1-MySQL部署"><a href="#4-1-MySQL部署" class="headerlink" title="4.1 MySQL部署"></a>4.1 MySQL部署</h3><h5 id="4-1-1案例：需求"><a href="#4-1-1案例：需求" class="headerlink" title="4.1.1案例：需求"></a>4.1.1案例：需求</h5><ul><li>在Docker 容器中部署MySQL，并通过外部MySQL 客户端操作MySQL Server</li></ul><h5 id="4-1-2-案例：实现"><a href="#4-1-2-案例：实现" class="headerlink" title="4.1.2 案例：实现"></a>4.1.2 案例：实现</h5><ol><li>搜索mysql镜像</li><li>拉取mysql镜像</li><li>创建容器</li><li>操作容器中的mysql</li></ol><h5 id="4-1-3-问题及解决方案"><a href="#4-1-3-问题及解决方案" class="headerlink" title="4.1.3 问题及解决方案"></a>4.1.3 问题及解决方案</h5><ul><li>容器内的网络服务和外部机器不能直接通信</li><li>外部机器和宿主机可以直接通信</li><li>宿主机和容器可以直接通信</li><li>当容器中的网络服务需要被外部机器访问时，可以将容器中提供服务的端口映射到宿主机的端口上。外部机器访问宿主机的端口，从而间接访问容器的服务</li><li>这种操作称为：端口映射</li></ul><h5 id="4-1-4-部署MySQL"><a href="#4-1-4-部署MySQL" class="headerlink" title="4.1.4 部署MySQL"></a>4.1.4 部署MySQL</h5><ol><li><p>搜索mysql镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure></li><li><p>拉取mysql镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.6</span><br></pre></td></tr></table></figure></li><li><p>创建容器，设置端口映射、目录映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在/root目录下创建mysql目录用于存储mysql数据信息</span></span><br><span class="line">mkdir ~/mysql</span><br><span class="line">cd ~/mysql</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -id \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">--name=c_mysql \</span><br><span class="line">-v $PWD/conf:/etc/mysql/conf.d \</span><br><span class="line">-v $PWD/logs:/logs \</span><br><span class="line">-v $PWD/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">mysql:5.6</span><br></pre></td></tr></table></figure><ul><li>参数说明<ul><li><code>-p 3307:3306</code>：将容器的3306端口映射到宿主机的3307端口</li><li><code>--v $PWD/conf:/etc/mysql/conf.d</code>：将主机当前目录下的<code>conf/my.cnf</code>挂载到容器<code>/etc/mysql/my.cnf</code>配置目录</li><li><code>-v $PWD/logs:/logs</code>：将主机当前目录下的<code>logs</code>目录挂载到容器的<code>/logs</code>目录日志</li><li><code>-v $PWD/data:/var/lib/mysql</code>：将主机当前目录下的<code>data</code>目录挂载到容器的<code>/var/lib/mysql</code>数据目录</li><li><code>-e MYSQL_ROOT_PASSWORD=123456</code>：初始化root 用户密码</li></ul></li></ul></li><li><p>使用外部机器访问MySQL</p></li></ol><h3 id="4-2-Tomcat部署"><a href="#4-2-Tomcat部署" class="headerlink" title="4.2 Tomcat部署"></a>4.2 Tomcat部署</h3><ol><li><p>搜索Tomcat 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search tomcat</span><br></pre></td></tr></table></figure></li><li><p>拉取mysql镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat</span><br></pre></td></tr></table></figure></li><li><p>创建容器，设置端口映射、目录映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在/root目录下创建tomcat目录用于存放tomcat数据信息</span></span><br><span class="line">mkdir ~/tomcat</span><br><span class="line">cd ~/tomcat</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=c_tomcat \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-v $PWD:/usr/local/tomcat/webapps \</span><br><span class="line">tomcat</span><br></pre></td></tr></table></figure><ul><li>参数说明：<ul><li><code>-p 8080:8080</code>：将容器的8080端口映射到主机的8080端口</li><li><code>-v $PWD:/usr/local/tomcat/webapps</code>：将主机中当前目录挂载到容器的<code>webapps</code></li></ul></li></ul></li><li><p>最后使用外部机器访问tomcat</p></li></ol><h3 id="4-3-Nginx部署"><a href="#4-3-Nginx部署" class="headerlink" title="4.3 Nginx部署"></a>4.3 Nginx部署</h3><ol><li><p>搜索Nginx 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure></li><li><p>拉取mysql镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure></li><li><p>创建容器，设置端口映射、目录映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在/root目录下创建nginx目录用于存储nginx数据信息</span></span><br><span class="line">mkdir ~/nginx</span><br><span class="line">cd ~/nginx</span><br><span class="line">mkdir conf</span><br><span class="line">cd conf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在~/nginx/conf/下创建nginx.conf文件，粘贴下面代码块的内容</span></span><br><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=c_nginx \</span><br><span class="line">-p 80:800 \</span><br><span class="line">-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v $PWD/logs:/var/log/nginx \</span><br><span class="line">-v $PWD/html:/usr/share/nginx/html \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><ul><li>参数说明：<ul><li><code>-p 80:800</code>：将容器的80端口映射到宿主机的80端口</li><li><code>-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf</code>：将主机当前目录下的<code>/conf/nginx.conf</code>挂载到容器的<code>:/etc/nginx/nginx.conf</code>配置目录</li><li><code>-v $PWD/html:/usr/share/nginx/html</code>：将主机当前目录挂载到容器的<code>/val/log/nginx</code>日志目录</li></ul></li></ul></li><li><p>使用外部机器访问nginx</p></li></ol><h3 id="4-4-Redis部署"><a href="#4-4-Redis部署" class="headerlink" title="4.4 Redis部署"></a>4.4 Redis部署</h3><ol><li><p>搜索Redis 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search redis</span><br></pre></td></tr></table></figure></li><li><p>拉取Redis 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:5.0</span><br></pre></td></tr></table></figure></li><li><p>创建容器，设置端口映射、目录映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=c_redis -p 6379:6379 redis:5.0</span><br></pre></td></tr></table></figure></li><li><p>使用外部机器连接redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli.exe -h 192.168.187.129 -p 6379</span><br></pre></td></tr></table></figure></li></ol><h2 id="第五章-Dockerfile"><a href="#第五章-Dockerfile" class="headerlink" title="第五章 Dockerfile"></a>第五章 Dockerfile</h2><h3 id="5-1-Docker-镜像原理"><a href="#5-1-Docker-镜像原理" class="headerlink" title="5.1 Docker 镜像原理"></a>5.1 Docker 镜像原理</h3><p>​思考：</p><ul><li>Docker 镜像的本质是什么？<ul><li>是一个分层的文件系统</li></ul></li><li>Docker 中一个CentOS 镜像为什么只有200MB，而一个CentOS 操作系统的iso 文件要几个G？<ul><li>CentOS的iso镜像文件包含bootfs和rootfs，而Docker的CentOS镜像复用操作系统的bootfs，只有rootfs和其他镜像层</li></ul></li><li>Docker 中一个Tomcat 镜像为什么有500MB，而一个Tomcat 安装包只有70多MB？<ul><li>由于Docker中镜像是分层的，tomcat虽然只有70多MB，但他需要依赖于父镜像和基础镜像，所以整个对外暴露的tomcat镜像大小500多MB</li></ul></li></ul><p>操作系统组成部分：</p><ul><li>进程调度子系统</li><li>进程通信子系统</li><li>内存管理子系统</li><li>设备管理子系统</li><li>文件管理子系统</li><li>网络通信子系统</li><li>作业控制子系统</li></ul><p>Linux文件系统由bootfs 和rootfs 两部分组成</p><ul><li>bootfs：包含bootloader（引导加载程序）和kernel（内核）</li><li>rootfs：root文件系统，包含的就是典型的Linux 系统中的&#x2F;dev、&#x2F;proc、&#x2F;bin等标准目录和文件</li><li>不同的Linux 发行版，bootfs 基本一样，而rootfs 不同，如ubuntu，CentOS等</li></ul><p><strong>Docker 镜像原理：</strong></p><ul><li>Docker 镜像是由特殊的文件系统叠加而成</li><li>最低端是bootfs，并使用宿主机的bootfs</li><li>第二层是root 文件系统rootfs ，称为base iamge</li><li>然后再往上可以叠加其他的镜像文件</li><li>统一文件系统（Union File System）技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的视角，这样就隐藏了多层的存在，在用户的角度看来，只存在一个文件系统</li><li>一个镜像可以放在另一个镜像的上面。位于下面的镜像称为父镜像，最底部的镜像称为基础镜像</li><li>当从一个镜像启动容器时，Docker会在最顶层加载一个读写文件系统作为容器</li></ul><p><strong>镜像制作：</strong></p><ul><li><p>容器转为镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit 容器id 镜像名称:版本号</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o 压缩文件名称 镜像名称:版本号</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i 压缩文件名称</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-2-Dockerfile-概念及作用"><a href="#5-2-Dockerfile-概念及作用" class="headerlink" title="5.2 Dockerfile 概念及作用"></a>5.2 Dockerfile 概念及作用</h3><p><strong>Dockerfile 概念</strong></p><ul><li>Dockerfile 是一个文本文件</li><li>包含了一条条的指令</li><li>每一条指令构建一层，基于基础镜像，最终构建出一个新的镜像</li><li>对于开发人员，可以为开发团队提供一个完全一致的开发环境</li><li>对于测试人员，可以直接拿开发时所构建的镜像或者通过Dockerfile 文件构建一个新的镜像开始工作了</li><li>对于运维人员，在部署时，可以实现应用的无缝移植</li></ul><h3 id="5-3-Dockerfile-关键字"><a href="#5-3-Dockerfile-关键字" class="headerlink" title="5.3 Dockerfile 关键字"></a>5.3 Dockerfile 关键字</h3><table><thead><tr><th>关键字</th><th>作用</th><th align="left">备注</th></tr></thead><tbody><tr><td>FROM</td><td>指定父镜像</td><td align="left">指定dockerfile基于哪个images构建</td></tr><tr><td>MAINTAINER</td><td>作者信息</td><td align="left">用来标明这个dockerfile 谁写的</td></tr><tr><td>LABEL</td><td>标签</td><td align="left">用来指明dockerfile 的标签，可以使用Label代替Maintainer 最终都是在docker image基本信息中嗯可以查看</td></tr><tr><td>RUN</td><td>执行命令</td><td align="left">执行一段命令 默认是<code>/bin/sh</code> 格式：<code>RUN command</code> 或者 <code>RUN [&quot;command&quot;,&quot;param1&quot;,&quot;param2&quot;]</code></td></tr><tr><td>CMD</td><td>容器启动命令</td><td align="left">提供启动容器时候的默认命令和ENTRYPOINT配合使用。格式：<code>CMD command param1 param2</code>或者<code>CMD [&quot;command&quot;,&quot;param1&quot;,&quot;param2&quot;]</code></td></tr><tr><td>ENTRYPOINT</td><td>入口</td><td align="left">一般在制作一些执行就关闭的容器中会使用</td></tr><tr><td>COPY</td><td>复制文件</td><td align="left">build 的时候复制文件到image中</td></tr><tr><td>ADD</td><td>添加文件</td><td align="left">build 的时候添加文件到iamge 中，不仅仅局限于当前build 上下文 可以来源于远程服务</td></tr><tr><td>ENV</td><td>环境变量</td><td align="left">指定build 时候的环境变量 可以在启动容器的时候 通过<code>-e</code>覆盖  格式：<code>ENV name = value</code></td></tr><tr><td>ARG</td><td>构建参数</td><td align="left">构建参数 只在构建的时候使用参时 如果有ENV 那么ENV 的相同名字的值始终覆盖ARG 的值</td></tr><tr><td>VOLUME</td><td>定义外部可以挂载的数据卷</td><td align="left">指定build 的image 那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用<code>-v</code>绑定 格式：<code>VOLUME [&quot;目录&quot;]</code></td></tr><tr><td>EXPOSE</td><td>暴露端口</td><td align="left">定义容器运行的时候监听的端口 启动容器的使用<code>-p</code>来绑定暴露端口 格式：<code>EXPOSE 8080</code>或者<code>EXPOSE 8080/udp</code></td></tr><tr><td>WORKDIR</td><td>工作目录</td><td align="left">指定容器内部的工作目录 如果没有创建则自动创建 如果指定&#x2F;使用是绝对地址 如果不是&#x2F;开头那么实在上一条workdir 的路径的相对路径</td></tr><tr><td>USER</td><td>指定执行用户</td><td align="left">指定build 或者启动的时候 用户 在RUN CMD ENTRYPOINT执行的时候的用户</td></tr><tr><td>HEALTHCHECK</td><td>健康检查</td><td align="left">指定监测当前容器的健康测试的命令 基本上没有 因为很多时候 应用本身由健康监测机制</td></tr><tr><td>ONBUILD</td><td>触发器</td><td align="left">当存在ONBUILD 关键字的镜像作为基础镜像的时候 当执行FROM 完成之后 会执行ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td></tr><tr><td>STOPSIGNAL</td><td>发送信息量到宿主机</td><td align="left">该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出</td></tr><tr><td>SHELL</td><td>指定执行脚本的shell</td><td align="left">指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td></tr></tbody></table><h3 id="5-4-案例"><a href="#5-4-案例" class="headerlink" title="5.4 案例"></a>5.4 案例</h3><h4 id="5-4-1-案例一"><a href="#5-4-1-案例一" class="headerlink" title="5.4.1 案例一"></a>5.4.1 案例一</h4><p>需求：</p><p>​自定义CentOS7镜像。要求：</p><ol><li>默认登录路径为<code>/usr</code></li><li>可以使用vim</li></ol><p>实现步骤：</p><ol><li>定义父镜像：<code>FROM centos:7</code></li><li>定义作者信息：<code>MAINTAINER crisp077 &lt;www.crisp077.xyz&gt;</code></li><li>执行安装vim命令：<code>RUN yum install -y vim</code></li><li>定义默认的工作目录：<code>WORKDIR /usr</code></li><li>定义容器启动执行的命令：<code>CMD /bin/bash</code></li></ol><p>创建使用dockerfile的镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f ./centos_docker -t crisp_centos:1 .</span><br></pre></td></tr></table></figure><h4 id="5-4-2-案例二"><a href="#5-4-2-案例二" class="headerlink" title="5.4.2 案例二"></a>5.4.2 案例二</h4><p>需求：</p><p>​定义dockerfile，发布springboot 项目</p><p>实现步骤：</p><ol><li>定义父镜像：<code>FROM java:8</code></li><li>定义作者信息：<code>MAINTAINER crisp077 &lt;www.crisp077.xyz&gt;</code></li><li>将jar包添加到容器：<code>ADD springboot.jar app.jar</code></li><li>定义容器启动执行的命令：<code>CMD java -jar app.jar</code></li><li>通过dockerfile 构建镜像：<code>docker build -f dockerfile文件路径 -t 镜像名称:版本</code></li></ol><h2 id="第六章-Docker-服务编排"><a href="#第六章-Docker-服务编排" class="headerlink" title="第六章 Docker 服务编排"></a>第六章 Docker 服务编排</h2><h3 id="6-1-服务编排的概念"><a href="#6-1-服务编排的概念" class="headerlink" title="6.1 服务编排的概念"></a>6.1 服务编排的概念</h3><p>​微服务架构的应用系统中一般包含若干个微服务，每个微服务都会部署多个实例，如果每个微服务都要手动启动，维护工作量会很大</p><ul><li>要从Dockerfile build image 或者去 dockerhub 拉取image</li><li>要创建多个container</li><li>要管理这些container（启动停止删除）</li></ul><p><strong>服务编排：</strong></p><p>​按照一定的业务规则批量管理容器</p><h3 id="6-2-Dockers-Compose-概述"><a href="#6-2-Dockers-Compose-概述" class="headerlink" title="6.2 Dockers Compose 概述"></a>6.2 Dockers Compose 概述</h3><p>​Docker Compose 是一个编排多容器分布式部署的工具，提供命令集管理器化应用的完整开发期，包括服务构建，启动和停止。使用步骤：</p><ol><li>利用 Dockerfile 定义运行环境镜像</li><li>使用 docker-compose.yml 定义组成应用的各服务</li><li>运行 docker-compose up 启动应用</li></ol><h5 id="6-2-1-安装Docker-Compose"><a href="#6-2-1-安装Docker-Compose" class="headerlink" title="6.2.1 安装Docker Compose"></a>6.2.1 安装Docker Compose</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Compose 目前已经完全支持Linux、MAC OS、Windows，在安装Compose之前，需要先安装Docker。下面以编译好的二进制包方式安装在Linux中</span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-&#x27;uname -s&#x27;-&#x27;uname -m&#x27; -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置文件可执行权限</span></span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看版本信息</span></span><br><span class="line">docker-compose -version</span><br></pre></td></tr></table></figure><h5 id="6-2-2-卸载Docker-Compose"><a href="#6-2-2-卸载Docker-Compose" class="headerlink" title="6.2.2 卸载Docker Compose"></a>6.2.2 卸载Docker Compose</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">二进制包方式安装的，删除二进制文件即可</span></span><br><span class="line">rm /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="6-3-案例"><a href="#6-3-案例" class="headerlink" title="6.3 案例"></a>6.3 案例</h3><p><strong>使用docker compose编排nginx+springboot项目</strong></p><ol><li><p>创建docker-compose目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/docker-compose</span><br><span class="line">cd ~/docker-compose</span><br></pre></td></tr></table></figure></li><li><p>编写<code>docker-compose.yml</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  nginx:</span><br><span class="line">   iamge: nginx</span><br><span class="line">   ports:</span><br><span class="line">    - 80:80</span><br><span class="line">   links:</span><br><span class="line">    - app</span><br><span class="line">   volumes:</span><br><span class="line">   - ./nginx/conf.d:/etc/nginx/conf.d</span><br><span class="line">   app:</span><br><span class="line">     image: app</span><br><span class="line">     expose:</span><br><span class="line">       - &quot;8080&quot;</span><br></pre></td></tr></table></figure></li><li><p>创建<code>./nginx/conf.d</code>目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ./nginx/conf.d</span><br></pre></td></tr></table></figure></li><li><p>在<code>./nginx/conf.d</code>目录下编写<code>crisp.conf</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">acess_log off;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass https://app:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>~/docker-compose</code>目录下 使用dockers-compose 启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure></li><li><p>测试访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.187.129/hello</span><br></pre></td></tr></table></figure></li></ol><h2 id="第七章-Docker-私有仓库"><a href="#第七章-Docker-私有仓库" class="headerlink" title="第七章 Docker 私有仓库"></a>第七章 Docker 私有仓库</h2><h3 id="7-1-搭建私有仓库"><a href="#7-1-搭建私有仓库" class="headerlink" title="7.1 搭建私有仓库"></a>7.1 搭建私有仓库</h3><p>​<strong>Docker 私有仓库</strong></p><ul><li>Docker 官方的Docker hub（<a href="https://hub.docker.com)是一个用于管理公共镜像的仓库,我们可以从上面拉取镜像到本地,也可以把我们自己的镜像推送上去.但是,有时候我们的服务器无法访问互联网,或者你不希望将自己的镜像放到公网当中,那么我们就需要搭建自己的私有仓库来存储和管理自己的镜像./">https://hub.docker.com）是一个用于管理公共镜像的仓库，我们可以从上面拉取镜像到本地，也可以把我们自己的镜像推送上去。但是，有时候我们的服务器无法访问互联网，或者你不希望将自己的镜像放到公网当中，那么我们就需要搭建自己的私有仓库来存储和管理自己的镜像。</a></li></ul><p><strong>私有仓库搭建</strong></p><ol><li><p>拉取私有仓库镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure></li><li><p>启动私有仓库容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=registry -p 5000:5000 registry</span><br></pre></td></tr></table></figure></li><li><p>打开浏览器，输入地址<code>https://私有仓库服务器ip:5000/v2/_catalog</code>看到<code>&#123;&quot;repositories&quot;:[]&#125;</code>表示私有仓库搭建成功</p></li><li><p>修改<code>deamon.json</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在上述文件中添加一个key，保存退出。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">此步用于让docker信任私有仓库地址</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意将私有仓库服务器ip修改为自己私有仓库服务器真实ip</span></span><br><span class="line">&#123;&quot;insecure-registries&quot;: [&quot;私有仓库服务器ip:5000&quot;]&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启docker 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br><span class="line">docker start registry</span><br></pre></td></tr></table></figure></li></ol><h3 id="7-2-上传镜像到私有仓库"><a href="#7-2-上传镜像到私有仓库" class="headerlink" title="7.2 上传镜像到私有仓库"></a>7.2 上传镜像到私有仓库</h3><ol><li><p>标记镜像为私有仓库的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag centos:7 私有仓库服务器ip:5000/centos:7</span><br></pre></td></tr></table></figure></li><li><p>上传标记的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 私有仓库服务器ip:5000/centos:7</span><br></pre></td></tr></table></figure></li></ol><h3 id="7-3-从私有仓库拉取镜像"><a href="#7-3-从私有仓库拉取镜像" class="headerlink" title="7.3 从私有仓库拉取镜像"></a>7.3 从私有仓库拉取镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">拉取镜像</span></span><br><span class="line">docker pull 私有仓库服务器ip:5000/centos:7</span><br></pre></td></tr></table></figure><h2 id="第八章-Docker-相关概念"><a href="#第八章-Docker-相关概念" class="headerlink" title="第八章 Docker 相关概念"></a>第八章 Docker 相关概念</h2><p><strong>Docker容器虚拟化 与 传统虚拟机比较</strong></p><p>容器就是将软件打包成标准化单元，以用于开发、交付和部署</p><ul><li>容器镜像是轻量级的、可执行的独立软件包，包含软件运行所需要的所有内容：代码、运行时环境、系统工具、系统库和设置</li><li>容器化软件在任何环境中都能够始终如一地运行</li><li>容器赋予了软件独立性，使其免受外在环境差异的影响，从而有助于减少团队间在相同基础设施上运行不同软件时的冲突</li></ul><p><strong>相同：</strong></p><ul><li>容器和虚拟机具有相似的资源隔离和分配优势</li></ul><p><strong>不同：</strong></p><ul><li>容器虚拟化的是操作系统，虚拟机虚拟化的时硬件</li><li>传统的虚拟机可以运行不同的操作系统，容器只能运行同一类型的操作系统</li></ul><table><thead><tr><th>特性</th><th>容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr><tr><td>性能</td><td>接近原生</td><td>弱于</td></tr><tr><td>系统支持两</td><td>单机支持上千个容器</td><td>一般几十个</td></tr></tbody></table><blockquote><p>本讲义由B站菜鸟程序员视频教程<code>BV1CJ411T7BK</code>整理优化得到</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/22/hello-world/"/>
      <url>/2022/10/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
